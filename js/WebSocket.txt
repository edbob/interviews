Протокол WebSocket (стандарт RFC 6455) предназначен для решения любых 
задач и снятия ограничений обмена данными между браузером и сервером.

Он позволяет пересылать любые данные, на любой домен, безопасно и
почти без лишнего сетевого трафика.

// WebSocket.CONNECTING -соеденяется
// WebSocket.OPEN - соеденилось
// WebSocket.CLOSING - закрывается
// WebSocket.CLOSED - закрылось

// 1. Поддержка WSocets браузером
// 2. Создание обекта
// 3. Соеденение сервером
// 4. Назначение обработчиков событий
// 5. Обмен информацией с сервером
// 6. Закрыть соеденения

Для открытия соединения достаточно создать объект WebSocket, указав 
в нём специальный протокол ws
var socket = new WebSocket("ws://javascript.ru/ws");
У объекта socket есть четыре коллбэка: один при получении данных и 
три – при изменениях в состоянии соединения:

socket.onopen = function() {
  alert("Соединение установлено.");
};

socket.onclose = function(event) {
  if (event.wasClean) {
    alert('Соединение закрыто чисто');
  } else {
    alert('Обрыв соединения'); // например, "убит" процесс сервера
  }
  alert('Код: ' + event.code + ' причина: ' + event.reason);
};

socket.onmessage = function(event) {
  alert("Получены данные " + event.data);
};

socket.onerror = function(error) {
  alert("Ошибка " + error.message);
};

Для посылки данных используется метод socket.send(data).
 Пересылать можно любые данные.

Фрагментация

Позволяет отправлять сообщения в тех случаях, когда на момент 
начала посылки полный размер ещё неизвестен.

Например, идёт поиск в базе данных и что-то уже найдено, 
а что-то ещё может быть позже.

У всех сообщений, кроме последнего, бит FIN=0.
Опкод указывается только у первого, у остальных он должен
 быть равен 0x0.

PING / PONG

В протокол встроена проверка связи при помощи управляющих
 фреймов типа PING и PONG.

Тот, кто хочет проверить соединение, отправляет фрейм PING
 с произвольным телом. Его получатель должен в разумное 
время ответить фреймом PONG с тем же телом.

Этот функционал встроен в браузерную реализацию, так что 
браузер ответит на PING сервера, но управлять им из JavaScript нельзя.

Иначе говоря, сервер всегда знает, жив ли посетитель или 
у него проблема с сетью.

Чистое закрытие

При закрытии соединения сторона, желающая это сделать 
(обе стороны в WebSocket равноправны) отправляет закрывающий
 фрейм (опкод 0x8), в теле которого указывает причину закрытия.

В браузерной реализации эта причина будет содержаться в свойстве
 reason события onclose.

Наличие такого фрейма позволяет отличить «чистое закрытие»
 от обрыва связи.

В браузерной реализации событие onclose при чистом закрытии 
имеет event.wasClean = true.

Коды закрытия

Коды закрытия вебсокета event.code, чтобы не путать их с 
HTTP-кодами, состоят из 4 цифр:

1000
Нормальное закрытие.
1001
Удалённая сторона «исчезла». Например, процесс сервера 
убит или браузер перешёл на другую страницу.
1002
Удалённая сторона завершила соединение в связи 
с ошибкой протокола.
1003
Удалённая сторона завершила соединение в связи 
с тем, что она получила данные, которые не может принять.
 Например, сторона, которая понимает только текстовые данные,
 может закрыть соединение с таким кодом, если приняла 
бинарное сообщение.

Атака «отравленный кэш»

В ранних реализациях WebSocket существовала уязвимость, 
называемая «отравленный кэш» (cache poisoning).

Она позволяла атаковать кэширующие прокси-сервера, 
в частности, корпоративные.

Атака осуществлялась так:

Хакер заманивает доверчивого посетителя (далее Жертва) 
на свою страницу.

Страница открывает WebSocket-соединение на сайт хакера. 
Предполагается, что Жертва сидит через прокси. Собственно,
 на прокси и направлена эта атака.

Страница формирует специального вида WebSocket-запрос, 
который (и здесь самое главное!) ряд прокси серверов 
не понимают.

Они пропускают начальный запрос через себя (который 
содержит Connection: upgrade) и думают, что далее 
идёт уже следующий HTTP-запрос.

…Но на самом деле там данные, идущие через вебсокет! 
И обе стороны вебсокета (страница и сервер) контролируются Хакером.
 Так что хакер может передать в них нечто похожее на GET-запрос 
к известному ресурсу, например http://code.jquery.com/jquery.js,
 а сервер ответит «якобы кодом jQuery» с кэширующими заголовками.

Прокси послушно проглотит этот ответ и закэширует «якобы jQuery».

В результате при загрузке последующих страниц любой пользователь,
 использующий тот же прокси, что и Жертва, получит вместо 
http://code.jquery.com/jquery.js хакерский код.

Поэтому эта атака и называется «отравленный кэш».

Такая атака возможна не для любых прокси, но при анализе 
уязвимости было показано, что она не теоретическая, 
и уязвимые прокси действительно есть.

Поэтому придумали способ защиты – «маску».

Маска для защиты от атаки

Для того, чтобы защититься от атаки, и придумана маска.

Ключ маски – это случайное 32-битное значение, которое 
варьируется от пакета к пакету. Тело сообщения проходит 
через XOR ^ с маской, а получатель восстанавливает его 
повторным XOR с ней (можно легко доказать, что (x ^ a) ^ a == x).

Маска служит двум целям:

Она генерируется браузером. Поэтому теперь хакер не сможет
 управлять реальным содержанием тела сообщения. 
После накладывания маски оно превратится в бинарную мешанину.
Получившийся пакет данных уже точно не может быть 
воспринят промежуточным прокси как HTTP-запрос.
Наложение маски требует дополнительных ресурсов, 
поэтому протокол WebSocket не требует её.

Если по этому протоколу связываются два клиента 
(не обязательно браузеры), доверяющие друг другу 
и посредникам, то можно поставить бит Маска в 0,
 и тогда ключ маски не указывается.